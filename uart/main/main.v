// File: main.v
// Generated by MyHDL 0.11
// Date: Mon Jan 18 08:56:26 2021


`timescale 1ns/10ps

module main (
    iClk,
    iRX,
    oTX
);


input iClk;
output iRX;
reg iRX;
output oTX;
reg oTX;

reg [7:0] iData;
wire clk;
wire iRst;
reg [7:0] oData;
reg WriteEnable;
reg [2:0] rx_addr;
wire [2:0] read_addr;
wire oWrBuffer_full;
wire [7:0] ldData;
reg RS232_Module0_sig_WrBuffer_full;
reg [8:0] RS232_Module0_tx_counter;
reg [3:0] RS232_Module0_tx_bit_count;
reg [8:0] RS232_Module0_rx_currentData;
reg [1:0] RS232_Module0_rx_State;
reg [2:0] RS232_Module0_write_addr;
reg [2:0] RS232_Module0_rx_addr;
reg [8:0] RS232_Module0_rx_counter;
reg [1:0] RS232_Module0_tx_State;
reg [9:0] RS232_Module0_SendREG;
reg [2:0] RS232_Module0_tx_addr;
reg [3:0] RS232_Module0_rx_bit_count;
reg [7:0] RS232_Module0_Receive_RAM [0:8-1];
reg [7:0] RS232_Module0_Transmit_RAM [0:8-1];

assign clk = 1'd0;
assign iRst = 1'd0;
assign read_addr = 3'd0;
assign ldData = 8'd0;


always @(posedge iClk) begin: MAIN_UPDATEBUFF1_RTL
    iData <= ldData;
    if ((WriteEnable == 0)) begin
        WriteEnable <= 1;
    end
    else begin
        WriteEnable <= 0;
    end
end


always @(posedge clk, negedge iRst) begin: MAIN_RS232_MODULE0_SEQ_LOGIC
    if ((iRst == 0)) begin
        RS232_Module0_rx_State <= 0;
        RS232_Module0_rx_counter <= 0;
        RS232_Module0_rx_currentData <= 0;
        RS232_Module0_rx_bit_count <= 0;
        RS232_Module0_rx_addr <= 0;
        rx_addr <= 0;
        RS232_Module0_tx_State <= 0;
        RS232_Module0_tx_addr <= 0;
        RS232_Module0_write_addr <= 0;
        RS232_Module0_SendREG <= 0;
        RS232_Module0_tx_counter <= 0;
        RS232_Module0_tx_bit_count <= 0;
    end
    else begin
        rx_addr <= RS232_Module0_rx_addr;
        oData <= RS232_Module0_Receive_RAM[read_addr];
        oTX <= 1;
        case (RS232_Module0_rx_State)
            'h0: begin
                if ((iRX == 0)) begin
                    RS232_Module0_rx_counter <= (RS232_Module0_rx_counter + 1);
                end
                else begin
                    RS232_Module0_rx_counter <= 0;
                end
                if ((RS232_Module0_rx_counter == 217)) begin
                    RS232_Module0_rx_State <= 1;
                    RS232_Module0_rx_counter <= 0;
                    RS232_Module0_rx_bit_count <= 0;
                end
            end
            'h1: begin
                RS232_Module0_rx_counter <= (RS232_Module0_rx_counter + 1);
                if ((RS232_Module0_rx_counter == 0)) begin
                    RS232_Module0_rx_currentData <= {iRX, RS232_Module0_rx_currentData[9-1:1]};
                    RS232_Module0_rx_bit_count <= (RS232_Module0_rx_bit_count + 1);
                end
                if ((RS232_Module0_rx_counter == 434)) begin
                    RS232_Module0_rx_counter <= 0;
                end
                if ((RS232_Module0_rx_bit_count == 9)) begin
                    RS232_Module0_rx_State <= 2;
                    RS232_Module0_rx_counter <= 0;
                end
            end
            'h2: begin
                RS232_Module0_rx_counter <= (RS232_Module0_rx_counter + 1);
                if ((RS232_Module0_rx_counter == 434)) begin
                    RS232_Module0_rx_State <= 0;
                    RS232_Module0_rx_counter <= 0;
                    if ((iRX == 1)) begin
                        RS232_Module0_Receive_RAM[RS232_Module0_rx_addr] <= RS232_Module0_rx_currentData[9-1:1];
                        RS232_Module0_rx_addr <= ((RS232_Module0_rx_addr + 1) % 8);
                    end
                end
            end
        endcase
        if ((WriteEnable && (!RS232_Module0_sig_WrBuffer_full))) begin
            RS232_Module0_Transmit_RAM[RS232_Module0_write_addr] <= iData;
            RS232_Module0_write_addr <= ((RS232_Module0_write_addr + 1) % 8);
        end
        case (RS232_Module0_tx_State)
            'h0: begin
                if ((RS232_Module0_write_addr != RS232_Module0_tx_addr)) begin
                    RS232_Module0_tx_counter <= 0;
                    RS232_Module0_tx_State <= 1;
                    RS232_Module0_tx_bit_count <= 0;
                    RS232_Module0_SendREG <= {1'h1, RS232_Module0_Transmit_RAM[RS232_Module0_tx_addr], 1'h0};
                    RS232_Module0_tx_addr <= ((RS232_Module0_tx_addr + 1) % 8);
                end
            end
            'h1: begin
                oTX <= RS232_Module0_SendREG[RS232_Module0_tx_bit_count];
                RS232_Module0_tx_counter <= (RS232_Module0_tx_counter + 1);
                if ((RS232_Module0_tx_counter == 434)) begin
                    RS232_Module0_tx_bit_count <= (RS232_Module0_tx_bit_count + 1);
                    RS232_Module0_tx_counter <= 0;
                    if ((RS232_Module0_tx_bit_count == 9)) begin
                        RS232_Module0_tx_State <= 0;
                    end
                end
            end
        endcase
    end
end


always @(RS232_Module0_write_addr, RS232_Module0_tx_addr) begin: MAIN_RS232_MODULE0_COMB_LOGIC
    if ((((RS232_Module0_write_addr + 1) % 8) == RS232_Module0_tx_addr)) begin
        RS232_Module0_sig_WrBuffer_full = 1'b1;
    end
    else begin
        RS232_Module0_sig_WrBuffer_full = 1'b0;
    end
end



assign oWrBuffer_full = RS232_Module0_sig_WrBuffer_full;


always @(posedge iClk) begin: MAIN_RS232LOOPBACK0_LOGIC
    iRX <= oTX;
end

endmodule
